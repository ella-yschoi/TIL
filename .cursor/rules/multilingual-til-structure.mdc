---
description:
globs:
alwaysApply: false
---
# Multilingual TIL Project Structure Rules

## 🎯 Project Overview
This is a **Today I Learned (TIL)** knowledge base organized as a multilingual tree structure. The project maintains both Korean (kor/) and English (eng/) versions of all learning materials across various technology domains.

## 📁 Multilingual Directory Structure

### MUST FOLLOW:
- **Maintain dual language structure**: 
  - `kor/` - Korean version of all content
  - `eng/` - English version of all content
  - Root level - Bilingual navigation and overview
- **Mirror directory structure**: Both `kor/` and `eng/` must have identical folder organization
- **Shared images**: Images are stored in both `kor/Images/` and `eng/Images/` for consistency
- **Language-specific README**: Each language directory has its own README.md

### Directory Structure:
```
TIL/
├── README.md (Bilingual overview with language selection)
├── kor/
│   ├── README.md (Korean overview with tree theme)
│   ├── SUMMARY.md (Korean navigation)
│   ├── Images/
│   └── [Technology Domains]/
├── eng/
│   ├── README.md (English overview with tree theme)
│   ├── SUMMARY.md (English navigation)
│   ├── Images/
│   └── [Technology Domains]/
```

### PROHIBITED:
- ❌ **NEVER** create content outside kor/ or eng/ directories
- ❌ **NEVER** have different folder structures between languages
- ❌ **NEVER** mix languages within the same file
- ❌ **NEVER** create orphaned files without corresponding versions

## 📝 File Naming Conventions

### MUST FOLLOW:
- **Identical file names**: Same naming across kor/ and eng/ directories
- **Use underscores for spaces**: `Data_Types.md`, `Object_Oriented_Programming.md`
- **Use ampersand for connected concepts**: `State&Props.md`, `SOP&CORS.md`
- **Capitalize each word**: `Higher_Order_Function.md`
- **Descriptive names**: File names should clearly indicate content

### PROHIBITED:
- ❌ **NEVER** use spaces in file names
- ❌ **NEVER** use camelCase or PascalCase for file names
- ❌ **NEVER** use special characters except `_` and `&`
- ❌ **NEVER** create different file names for same content across languages

## 📄 Content Structure Standards

### MUST FOLLOW:
- **Identical structure**: Same headings, sections, and organization across languages
- **Same code examples**: Code blocks must be identical in both versions
- **Consistent formatting**: Same markdown formatting and visual elements
- **Parallel content**: Every section must have corresponding content in both languages

### Content Organization Rules:
1. **Start with definition**: What is the concept?
2. **Explain syntax/grammar**: How to use it?
3. **Provide practical examples**: Real-world code examples
4. **Include visual aids**: Reference images when needed
5. **Add learning progression**: From basic to advanced

### PROHIBITED:
- ❌ **NEVER** skip sections in one language version
- ❌ **NEVER** have different code examples between languages
- ❌ **NEVER** use different heading structures
- ❌ **NEVER** omit visual elements in one version

## 💻 Code Block Standards

### MUST FOLLOW:
- **Identical code**: Code blocks must be exactly the same in both languages
- **Language-specific comments**: Only comments and explanations should differ
- **Specify language**: Always use ```javascript, ```shell, ```typescript
- **Runnable examples**: Code should be executable in both versions

### Code Translation Rules:
```javascript
// Korean version (kor/)
let arr = [1, 2, 3];
arr.pop(); // 마지막 요소 제거

// English version (eng/)
let arr = [1, 2, 3];
arr.pop(); // Remove the last element
```

### PROHIBITED:
- ❌ **NEVER** change code logic between languages
- ❌ **NEVER** modify variable names or function calls
- ❌ **NEVER** use different code examples
- ❌ **NEVER** translate programming keywords

## 🖼️ Image Usage Rules

### MUST FOLLOW:
- **Duplicate images**: Store identical images in both `kor/Images/` and `eng/Images/`
- **Same file names**: Use identical image names across languages
- **Relative paths**: Reference as `../Images/filename.png` in both versions
- **Descriptive names**: `git_merge.png`, `http_message.png`

### PROHIBITED:
- ❌ **NEVER** reference images from external URLs
- ❌ **NEVER** use different image names between languages
- ❌ **NEVER** place images outside the Images/ directory
- ❌ **NEVER** use generic names like `image1.png`

## 🌐 Language-Specific Standards

### Korean Version (kor/):
- **Use Korean language**: All content must be in Korean
- **Korean technical terms**: Use appropriate Korean terminology
- **Korean explanations**: Provide clear Korean explanations
- **Korean navigation**: All navigation elements in Korean

### English Version (eng/):
- **Use English language**: All content must be in English
- **English technical terms**: Use standard English terminology
- **English explanations**: Provide clear English explanations
- **English navigation**: All navigation elements in English

### PROHIBITED:
- ❌ **NEVER** mix languages within the same file
- ❌ **NEVER** use inconsistent terminology within a language
- ❌ **NEVER** translate programming language keywords
- ❌ **NEVER** lose technical accuracy during translation

## 📚 Content Quality Standards

### MUST FOLLOW:
- **Maintain educational quality**: Both versions must be equally educational
- **Preserve technical accuracy**: Exact technical meaning in both languages
- **Consistent terminology**: Use uniform terms within each language
- **Complete content**: No missing sections in either language
- **Practical examples**: Working code examples in both versions

### PROHIBITED:
- ❌ **NEVER** skip content in one language version
- ❌ **NEVER** use different examples between languages
- ❌ **NEVER** lose educational progression
- ❌ **NEVER** create inconsistent terminology

## 🔄 Navigation and Linking

### MUST FOLLOW:
- **Language-specific navigation**: Each language has its own SUMMARY.md
- **Consistent structure**: Same file organization in both languages
- **Working links**: All internal links must work within each language
- **Cross-language references**: Root README.md provides language selection

### Navigation Structure:
- Root `README.md` - Bilingual overview with language selection
- `kor/README.md` - Korean project overview with tree theme
- `kor/SUMMARY.md` - Korean navigation
- `eng/README.md` - English project overview with tree theme
- `eng/SUMMARY.md` - English navigation

### PROHIBITED:
- ❌ **NEVER** break internal links within a language
- ❌ **NEVER** create dead links
- ❌ **NEVER** forget to update navigation when adding files
- ❌ **NEVER** mix language references in navigation

## 🎨 Visual Design Standards

### MUST FOLLOW:
- **Consistent emojis**: Use same emojis across both languages
- **Same formatting**: Identical bold, italic, and code formatting
- **Visual hierarchy**: Same heading structure and spacing
- **Tree theme**: Maintain 🌳 tree theme in both versions

### PROHIBITED:
- ❌ **NEVER** use different emojis between languages
- ❌ **NEVER** change visual formatting
- ❌ **NEVER** modify spacing or layout
- ❌ **NEVER** lose visual consistency

## 📋 File Management Workflow

### MUST FOLLOW:
1. **Create in both languages**: Always create content in both kor/ and eng/
2. **Maintain synchronization**: Keep both versions updated together
3. **Test both versions**: Verify all links and content work in both languages
4. **Update navigation**: Keep all navigation files synchronized

### Quality Checklist:
- [ ] Content exists in both kor/ and eng/
- [ ] File names are identical across languages
- [ ] Code examples are identical
- [ ] Navigation works in both languages
- [ ] Images are available in both versions
- [ ] Terminology is consistent within each language

### PROHIBITED:
- ❌ **NEVER** create content in only one language
- ❌ **NEVER** forget to update both versions
- ❌ **NEVER** ignore navigation synchronization
- ❌ **NEVER** skip quality checks for either language

## 🚀 Technology Stack Focus

### Priority Technologies (Both Languages):
1. **JavaScript/TypeScript**: Core programming concepts
2. **React**: Modern frontend development
3. **Git**: Version control and collaboration
4. **Web Technologies**: HTTP, REST API, Browser concepts
5. **Cloud/AWS**: Modern deployment and infrastructure
6. **Design Systems**: UI/UX and design principles

### MUST FOLLOW:
- **Focus on practical application**: Emphasize real-world usage in both languages
- **Include modern best practices**: Stay current with industry standards
- **Provide troubleshooting guides**: Include common issues and solutions
- **Maintain technical accuracy**: Preserve exact technical meaning

### PROHIBITED:
- ❌ **NEVER** include outdated information
- ❌ **NEVER** skip security considerations
- ❌ **NEVER** ignore performance implications
- ❌ **NEVER** lose technical precision

## ⚠️ Critical Reminders

### ALWAYS REMEMBER:
- This is a **multilingual learning resource**
- **Both languages are equally important**
- **Content must be identical in structure and code**
- **Navigation must work in both languages**
- **Images must be available in both versions**
- **Technical accuracy must be preserved**

### IMMEDIATE STOP CONDITIONS:
- If you're about to create content in only one language
- If you're about to use different file names between languages
- If you're about to change code examples between languages
- If you're about to break navigation in either language
- If you're about to lose technical accuracy
- If you're about to create inconsistent terminology

## 📋 File Reference Examples

### Core Files:
- [README.md](mdc:README.md) - Bilingual project overview
- [kor/README.md](mdc:kor/README.md) - Korean project overview
- [eng/README.md](mdc:eng/README.md) - English project overview
- [kor/JavaScript/Array.md](mdc:kor/JavaScript/Array.md) - Korean array concepts
- [eng/JavaScript/Array.md](mdc:eng/JavaScript/Array.md) - English array concepts

### Image References:
- [kor/Images/array.png](mdc:kor/Images/array.png) - Korean version image
- [eng/Images/array.png](mdc:eng/Images/array.png) - English version image
