---
description:
globs:
alwaysApply: false
---
# TIL Content Quality Standards

## üéØ Content Quality Overview
This document defines the quality standards for maintaining educational content in both Korean (kor/) and English (eng/) versions of the TIL project. All content must meet these standards to ensure effective learning outcomes.

## üìö Educational Content Standards

### MUST FOLLOW:
- **Clear learning objectives**: Each document should have clear learning goals
- **Progressive difficulty**: Content should build from basic to advanced concepts
- **Practical examples**: Include real-world, working code examples
- **Error handling**: Explain common mistakes and how to avoid them
- **Visual aids**: Use images and diagrams to enhance understanding
- **Consistent terminology**: Use uniform terms within each language

### Content Structure Requirements:
1. **Definition**: Clear explanation of what the concept is
2. **Syntax/Grammar**: How to use the concept correctly
3. **Examples**: Practical, working code examples
4. **Common pitfalls**: What to avoid and why
5. **Best practices**: Recommended approaches and patterns
6. **Practice exercises**: Opportunities for hands-on learning

### PROHIBITED:
- ‚ùå **NEVER** skip the definition section
- ‚ùå **NEVER** provide code without explanations
- ‚ùå **NEVER** ignore error scenarios
- ‚ùå **NEVER** use outdated or deprecated practices
- ‚ùå **NEVER** assume reader knowledge of advanced concepts

## üíª Code Quality Standards

### MUST FOLLOW:
- **Working examples**: All code examples must be executable
- **Clear comments**: Explain complex logic with inline comments
- **Realistic scenarios**: Use practical, real-world examples
- **Error handling**: Include error handling in examples where appropriate
- **Best practices**: Follow language-specific best practices
- **Consistent formatting**: Use consistent code style in both languages

### Code Example Requirements:
```javascript
// Korean version (kor/)
let arr = [1, 2, 3, 4, 5];

// Î∞∞Ïó¥Ïùò ÎßàÏßÄÎßâ ÏöîÏÜåÎ•º Ï†úÍ±∞ÌïòÎäî Î∞©Î≤ï
let lastElement = arr.pop();
console.log('Ï†úÍ±∞Îêú ÏöîÏÜå:', lastElement); // 5
console.log('ÏàòÏ†ïÎêú Î∞∞Ïó¥:', arr); // [1, 2, 3, 4]

// English version (eng/)
let arr = [1, 2, 3, 4, 5];

// Method to remove the last element of an array
let lastElement = arr.pop();
console.log('Removed element:', lastElement); // 5
console.log('Modified array:', arr); // [1, 2, 3, 4]
```

### PROHIBITED:
- ‚ùå **NEVER** include syntax errors in examples
- ‚ùå **NEVER** use placeholder text like "your_code_here"
- ‚ùå **NEVER** provide incomplete examples
- ‚ùå **NEVER** ignore error handling
- ‚ùå **NEVER** use unrealistic or contrived examples

## üåê Language-Specific Quality Standards

### Korean Version (kor/):
- **Natural Korean**: Write in clear, natural Korean
- **Technical accuracy**: Maintain exact technical meaning
- **Consistent terminology**: Use uniform Korean technical terms
- **Educational tone**: Maintain friendly, educational tone
- **Clear explanations**: Provide clear Korean explanations

### English Version (eng/):
- **Natural English**: Write in clear, natural English
- **Technical accuracy**: Maintain exact technical meaning
- **Consistent terminology**: Use uniform English technical terms
- **Educational tone**: Maintain friendly, educational tone
- **Clear explanations**: Provide clear English explanations

### PROHIBITED:
- ‚ùå **NEVER** use machine translation without review
- ‚ùå **NEVER** create awkward or unnatural language
- ‚ùå **NEVER** lose technical accuracy during translation
- ‚ùå **NEVER** use inconsistent terminology within a language
- ‚ùå **NEVER** mix languages within the same file

## üé® Visual Design Quality Standards

### MUST FOLLOW:
- **Consistent emojis**: Use same emojis across both languages
- **Strategic emoji use**: Use emojis to enhance understanding (max 2-3 per section)
- **Tree theme**: Maintain üå≥ tree theme in both versions
- **Visual hierarchy**: Clear heading structure and spacing
- **Consistent formatting**: Same bold, italic, and code formatting
- **Proper spacing**: Use `<br/>` tags for visual breaks

### Visual Elements:
- **Bold important terms**: Use **bold** for key concepts
- **Inline code formatting**: Use `backticks` for technical terms
- **Code blocks**: Use proper language specification
- **Lists**: Use consistent list formatting
- **Images**: Include descriptive alt text

### PROHIBITED:
- ‚ùå **NEVER** overuse emojis
- ‚ùå **NEVER** use all caps for emphasis
- ‚ùå **NEVER** mix different formatting styles inconsistently
- ‚ùå **NEVER** use different emojis between languages
- ‚ùå **NEVER** forget to add visual breaks

## üìñ Content Organization Quality Standards

### MUST FOLLOW:
- **Logical flow**: Content should follow a logical learning progression
- **Consistent structure**: Same organization in both languages
- **Clear sections**: Well-defined sections with clear purposes
- **Progressive complexity**: Build from simple to complex concepts
- **Cross-references**: Link to related content when appropriate

### Content Organization:
1. **Introduction**: What will be learned
2. **Definition**: What the concept is
3. **Syntax**: How to use it
4. **Examples**: Practical demonstrations
5. **Common mistakes**: What to avoid
6. **Best practices**: Recommended approaches
7. **Summary**: Key takeaways

### PROHIBITED:
- ‚ùå **NEVER** skip logical learning steps
- ‚ùå **NEVER** have different organization between languages
- ‚ùå **NEVER** create content without clear purpose
- ‚ùå **NEVER** ignore learning progression
- ‚ùå **NEVER** create orphaned content without context

## üîó Navigation Quality Standards

### MUST FOLLOW:
- **Working links**: All internal links must function correctly
- **Consistent navigation**: Same structure in both languages
- **Clear navigation**: Easy to find and navigate content
- **Updated navigation**: Keep navigation synchronized with content
- **Cross-language references**: Root README.md provides language selection

### Navigation Requirements:
- **Language-specific navigation**: Each language has its own SUMMARY.md
- **Consistent structure**: Same file organization in both languages
- **Working links**: All internal links must work within each language
- **Clear organization**: Logical grouping of related content

### PROHIBITED:
- ‚ùå **NEVER** create dead links
- ‚ùå **NEVER** forget to update navigation when adding content
- ‚ùå **NEVER** break internal links
- ‚ùå **NEVER** create inconsistent navigation between languages
- ‚ùå **NEVER** mix language references in navigation

## üñºÔ∏è Image Quality Standards

### MUST FOLLOW:
- **Descriptive names**: Use clear, descriptive image names
- **Consistent naming**: Same image names across languages
- **Proper references**: Use correct relative paths
- **Alt text**: Include descriptive alt text for accessibility
- **Relevant content**: Images should enhance understanding

### Image Requirements:
- **Store in Images/**: All images must be in the Images directory
- **Duplicate images**: Store identical images in both kor/Images/ and eng/Images/
- **Clear visuals**: Images should be clear and easy to understand
- **Consistent style**: Maintain consistent visual style across images

### PROHIBITED:
- ‚ùå **NEVER** use generic names like `image1.png`
- ‚ùå **NEVER** reference images from external URLs
- ‚ùå **NEVER** use different image names between languages
- ‚ùå **NEVER** place images outside the Images/ directory
- ‚ùå **NEVER** use low-quality or unclear images

## üìã Quality Assurance Process

### MUST VERIFY:
- [ ] Content exists in both kor/ and eng/
- [ ] All code examples are working and executable
- [ ] Terminology is consistent within each language
- [ ] Navigation works in both languages
- [ ] Images are available and properly referenced
- [ ] Learning progression is logical and clear
- [ ] Error scenarios are covered
- [ ] Best practices are included
- [ ] Visual formatting is consistent
- [ ] Links are working and accurate

### Quality Review Checklist:
1. **Content completeness**: All sections are present in both languages
2. **Technical accuracy**: Information is technically correct
3. **Code functionality**: All code examples work as expected
4. **Language quality**: Natural, clear language in both versions
5. **Visual consistency**: Same formatting and visual elements
6. **Navigation accuracy**: All links work correctly
7. **Learning progression**: Logical flow from basic to advanced

### PROHIBITED:
- ‚ùå **NEVER** skip quality checks for either language
- ‚ùå **NEVER** ignore broken links or references
- ‚ùå **NEVER** skip code testing
- ‚ùå **NEVER** forget to verify both language versions
- ‚ùå **NEVER** ignore user experience considerations

## üöÄ Technology-Specific Quality Standards

### JavaScript/TypeScript:
- **Modern syntax**: Use current language features
- **Best practices**: Follow language-specific conventions
- **Error handling**: Include proper error handling
- **Performance considerations**: Mention performance implications

### React:
- **Modern patterns**: Use current React patterns and hooks
- **Component design**: Demonstrate good component design
- **State management**: Show proper state management
- **Performance optimization**: Include performance tips

### Git:
- **Real-world scenarios**: Use practical Git workflows
- **Best practices**: Follow Git best practices
- **Common mistakes**: Explain common Git mistakes
- **Team collaboration**: Include collaboration scenarios

### Web Technologies:
- **Modern standards**: Use current web standards
- **Browser compatibility**: Consider browser compatibility
- **Security considerations**: Include security best practices
- **Performance optimization**: Mention performance tips

### PROHIBITED:
- ‚ùå **NEVER** use deprecated or outdated practices
- ‚ùå **NEVER** ignore security considerations
- ‚ùå **NEVER** skip performance implications
- ‚ùå **NEVER** use unrealistic examples
- ‚ùå **NEVER** ignore modern best practices

## ‚ö†Ô∏è Critical Quality Reminders

### ALWAYS REMEMBER:
- **Educational focus**: This is learning material, not documentation
- **Practical value**: Focus on real-world application
- **User experience**: Make content easy to understand and navigate
- **Technical accuracy**: Maintain exact technical precision
- **Consistency**: Keep both language versions synchronized
- **Accessibility**: Ensure content is accessible to all users

### IMMEDIATE STOP CONDITIONS:
- If you're about to create content in only one language
- If you're about to use outdated or deprecated practices
- If you're about to skip error handling or edge cases
- If you're about to ignore security or performance considerations
- If you're about to create content without clear learning objectives
- If you're about to skip quality checks for either language

## üìã File Reference Examples

### Quality Content Examples:
- [kor/JavaScript/Array.md](mdc:kor/JavaScript/Array.md) - Korean array concepts with examples
- [eng/JavaScript/Array.md](mdc:eng/JavaScript/Array.md) - English array concepts with examples
- [kor/Git/01_Install.md](mdc:kor/Git/01_Install.md) - Korean Git installation guide
- [eng/Git/01_Install.md](mdc:eng/Git/01_Install.md) - English Git installation guide
- [kor/React/Hook.md](mdc:kor/React/Hook.md) - Korean React hooks tutorial
- [eng/React/Hook.md](mdc:eng/React/Hook.md) - English React hooks tutorial
