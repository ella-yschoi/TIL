---
description:
globs:
alwaysApply: false
---
# TIL Content Quality Standards

## üéØ Quality Overview
This document defines the quality standards for maintaining educational content in both Korean (kor/) and English (en/) versions of the TIL project. All content must meet these standards to ensure effective learning outcomes.

## üìö Educational Content Standards

### MUST FOLLOW:
- **Clear learning objectives**: Each file should have a clear purpose and learning goal
- **Progressive difficulty**: Start with basics and build to advanced concepts
- **Practical examples**: Include real-world code examples and use cases
- **Error handling**: Explain common mistakes and how to avoid them
- **Visual aids**: Use images and diagrams to enhance understanding
- **Consistent terminology**: Use uniform terms within each language
- **Complete explanations**: Don't assume prior knowledge of advanced concepts

### Content Structure:
1. **Definition**: What is the concept?
2. **Syntax/Grammar**: How to use it?
3. **Examples**: Real-world code examples
4. **Common pitfalls**: What to avoid
5. **Best practices**: Recommended approaches

### PROHIBITED:
- ‚ùå **NEVER** skip the definition section
- ‚ùå **NEVER** assume reader knowledge of advanced topics
- ‚ùå **NEVER** use inconsistent terminology
- ‚ùå **NEVER** skip error handling explanations
- ‚ùå **NEVER** provide incomplete examples

## üíª Code Quality Standards

### MUST FOLLOW:
- **Working examples**: All code examples must be executable
- **Clear comments**: Explain complex logic with inline comments
- **Language specification**: Always specify the programming language
- **Realistic scenarios**: Use practical, real-world examples
- **Error scenarios**: Include examples of what can go wrong

### Code Example Structure:
```javascript
// Korean version (kor/)
let arr = [1, 2, 3];
arr.pop(); // Î∞∞Ïó¥Ïùò ÎßàÏßÄÎßâ ÏöîÏÜåÎ•º Ï†úÍ±∞ÌïòÎäî Î∞©Î≤ï

// English version (en/)
let arr = [1, 2, 3];
arr.pop(); // Method to remove the last element of an array
```

### PROHIBITED:
- ‚ùå **NEVER** include syntax errors in examples
- ‚ùå **NEVER** use placeholder text like "your_code_here"
- ‚ùå **NEVER** write code without language tags
- ‚ùå **NEVER** use overly complex examples for basic concepts

## üåê Language-Specific Quality Standards

### Korean Version (kor/):
- **Natural Korean**: Write in clear, natural Korean
- **Korean technical terms**: Use appropriate Korean terminology
- **Korean explanations**: Provide clear Korean explanations
- **Korean navigation**: All navigation elements in Korean

### English Version (en/):
- **Natural English**: Write in clear, natural English
- **English technical terms**: Use standard English terminology
- **English explanations**: Provide clear English explanations
- **English navigation**: All navigation elements in English

### PROHIBITED:
- ‚ùå **NEVER** mix languages within the same file
- ‚ùå **NEVER** use machine translation without review
- ‚ùå **NEVER** create awkward or unnatural language
- ‚ùå **NEVER** lose technical accuracy during translation

## üé® Visual Design Standards

### MUST FOLLOW:
- **Consistent formatting**: Use same markdown formatting in both languages
- **Strategic emoji use**: Use emojis to enhance readability (max 2-3 per section)
- **Clear hierarchy**: Use proper heading levels (H1, H2, H3)
- **Visual breaks**: Use `<br/>` tags for better readability
- **Bold important terms**: Use **bold** for key concepts
- **Inline code**: Use `backticks` for technical terms

### PROHIBITED:
- ‚ùå **NEVER** overuse emojis
- ‚ùå **NEVER** use all caps for emphasis
- ‚ùå **NEVER** skip visual hierarchy
- ‚ùå **NEVER** use inconsistent formatting

## üñºÔ∏è Image Quality Standards

### MUST FOLLOW:
- **Duplicate images**: Store identical images in both kor/Images/ and en/Images/
- **Descriptive names**: Use clear, descriptive image names
- **High quality**: Use clear, readable images
- **Relevant content**: Images should directly relate to the content
- **Proper references**: Use correct relative paths in both languages

### Image Examples:
```markdown
// Both kor/ and en/ versions use:
![array.png](mdc:../Images/array.png)
![git_merge.png](mdc:../Images/git_merge.png)
```

### PROHIBITED:
- ‚ùå **NEVER** use low-quality or blurry images
- ‚ùå **NEVER** use generic names like `image1.png`
- ‚ùå **NEVER** reference images from external URLs
- ‚ùå **NEVER** use different image names between languages

## üìã Quality Checklist

### MUST VERIFY:
- [ ] Content exists in both kor/ and en/
- [ ] All technical terms are consistent within each language
- [ ] Code examples are identical and working
- [ ] Images are available and properly referenced
- [ ] Navigation works in both languages
- [ ] No syntax errors in code examples
- [ ] Clear learning progression from basic to advanced
- [ ] Error handling and best practices included

### PROHIBITED:
- ‚ùå **NEVER** skip quality checks for either language
- ‚ùå **NEVER** ignore broken links or references
- ‚ùå **NEVER** forget to test both versions
- ‚ùå **NEVER** skip terminology consistency checks

## üîÑ Content Update Standards

### MUST FOLLOW:
1. **Update both languages**: Always update content in both kor/ and en/
2. **Maintain consistency**: Keep both versions synchronized
3. **Test functionality**: Verify all links and code examples work
4. **Update navigation**: Keep navigation files current
5. **Review quality**: Ensure both versions meet quality standards

### Update Process:
1. **Identify changes**: Determine what needs to be updated
2. **Update Korean version**: Make changes to kor/ content
3. **Update English version**: Make corresponding changes to en/ content
4. **Verify consistency**: Ensure both versions remain synchronized
5. **Test functionality**: Verify all links and code examples work

### PROHIBITED:
- ‚ùå **NEVER** update only one language version
- ‚ùå **NEVER** ignore cross-language consistency
- ‚ùå **NEVER** skip testing after updates
- ‚ùå **NEVER** forget to update navigation

## üìö Learning Progression Standards

### MUST FOLLOW:
- **Start with fundamentals**: Begin with basic concepts
- **Build complexity**: Gradually introduce advanced topics
- **Provide context**: Explain why concepts are important
- **Include prerequisites**: Mention what knowledge is needed
- **Cross-reference**: Link to related concepts when appropriate

### Learning Sequence Example:
1. **Basic concepts**: What is the technology?
2. **Setup/Installation**: How to get started
3. **Core features**: Essential functionality
4. **Advanced usage**: Complex scenarios
5. **Best practices**: Recommended approaches

### PROHIBITED:
- ‚ùå **NEVER** jump to advanced topics without foundation
- ‚ùå **NEVER** assume knowledge of unrelated concepts
- ‚ùå **NEVER** skip important prerequisites
- ‚ùå **NEVER** lose the educational flow

## üìã File Reference Examples

### Core Files:
- [README.md](mdc:README.md) - Bilingual project overview
- [kor/README.md](mdc:kor/README.md) - Korean project overview
- [en/README.md](mdc:en/README.md) - English project overview
- [kor/SUMMARY.md](mdc:kor/SUMMARY.md) - Korean navigation
- [en/SUMMARY.md](mdc:en/SUMMARY.md) - English navigation

### Content Examples:
- [kor/JavaScript/Array.md](mdc:kor/JavaScript/Array.md) - Korean array concepts with examples
- [en/JavaScript/Array.md](mdc:en/JavaScript/Array.md) - English array concepts with examples
- [kor/Git/01_Install.md](mdc:kor/Git/01_Install.md) - Korean Git installation guide
- [en/Git/01_Install.md](mdc:en/Git/01_Install.md) - English Git installation guide
- [kor/React/Hook.md](mdc:kor/React/Hook.md) - Korean React hooks tutorial
- [en/React/Hook.md](mdc:en/React/Hook.md) - English React hooks tutorial

## ‚ö†Ô∏è Critical Quality Reminders

### ALWAYS REMEMBER:
- **Educational focus**: This is learning material, not documentation
- **Technical accuracy**: Preserve exact technical meaning in both languages
- **User experience**: Make content easy to understand and follow
- **Consistency**: Use the same terms throughout each language
- **Completeness**: Don't leave important concepts unexplained

### IMMEDIATE STOP CONDITIONS:
- If you're about to skip quality checks
- If you're about to create content in only one language
- If you're about to use inconsistent terminology
- If you're about to skip error handling explanations
- If you're about to assume advanced knowledge
