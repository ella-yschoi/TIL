---
description: 
globs: 
alwaysApply: true
---
# TIL Project Structure and Documentation Rules

## üéØ Project Overview
This is a **Today I Learned (TIL)** knowledge base organized as a tree structure. The project follows strict documentation standards for learning materials across various technology domains. **Currently being translated from Korean to English.**

## üìÅ Directory Structure Rules

### MUST FOLLOW:
- **Use hierarchical categorization**: Organize content by technology domains (Algorithm, Auth, AWS, Design, Docker, Git, Infra, JavaScript, React, TypeScript, Web)
- **Maintain sequential numbering**: For learning sequences, use `01_`, `02_`, `03_` prefix (e.g., `01_Install.md`, `02_Add_Commit.md`)
- **Create Images folder**: Store all visual aids in `Images/` directory with descriptive names

### PROHIBITED:
- ‚ùå **NEVER** create files with spaces in names
- ‚ùå **NEVER** use camelCase or PascalCase for file names
- ‚ùå **NEVER** place images outside the `Images/` directory
- ‚ùå **NEVER** create nested subdirectories beyond the main categories

## üìù File Naming Conventions

### MUST FOLLOW:
- **Use underscores for spaces**: `Data_Types.md`, `Object_Oriented_Programming.md`
- **Use ampersand for connected concepts**: `State&Props.md`, `SOP&CORS.md`
- **Capitalize each word**: `Higher_Order_Function.md`
- **Use descriptive names**: File names should clearly indicate content

### PROHIBITED:
- ‚ùå **NEVER** use spaces in file names
- ‚ùå **NEVER** use special characters except `_` and `&`
- ‚ùå **NEVER** use abbreviations unless universally understood

## üìÑ Markdown Content Structure

### MUST FOLLOW:
```markdown
# Main Title (H1)

## Section Title (H2)

### Subsection (H3)

<br/>

## Content with proper spacing
```

### Content Organization Rules:
1. **Start with definition**: What is the concept?
2. **Explain syntax/grammar**: How to use it?
3. **Provide practical examples**: Real-world code examples
4. **Include visual aids**: Reference images when needed
5. **Add learning progression**: From basic to advanced

### PROHIBITED:
- ‚ùå **NEVER** skip the definition section
- ‚ùå **NEVER** write code without language specification
- ‚ùå **NEVER** use more than 3 heading levels
- ‚ùå **NEVER** forget to add `<br/>` for visual separation

## üíª Code Block Standards

### MUST FOLLOW:
- **Specify language**: Always use ```javascript, ```shell, ```typescript
- **Include comments**: Explain complex logic with inline comments
- **Provide runnable examples**: Code should be executable
- **Use realistic scenarios**: Examples should reflect real development situations

### PROHIBITED:
- ‚ùå **NEVER** write code without language tags
- ‚ùå **NEVER** include syntax errors in examples
- ‚ùå **NEVER** use placeholder text like "your_code_here"
- ‚ùå **NEVER** forget to explain what the code does

## üñºÔ∏è Image Usage Rules

### MUST FOLLOW:
- **Store in Images/**: All images must be in the Images directory
- **Use relative paths**: Reference as `../Images/filename.png`
- **Descriptive names**: `git_merge.png`, `http_message.png`
- **Include alt text**: Always describe the image content

### PROHIBITED:
- ‚ùå **NEVER** reference images from external URLs
- ‚ùå **NEVER** use generic names like `image1.png`
- ‚ùå **NEVER** forget to update image references when moving files

## üé® Visual Design Standards

### MUST FOLLOW:
- **Use emojis strategically**: üå≥ for tree theme, ü™µ for branches
- **Bold important terms**: Use **bold** for key concepts
- **Inline code formatting**: Use `backticks` for technical terms
- **Consistent spacing**: Use `<br/>` for visual breaks

### PROHIBITED:
- ‚ùå **NEVER** overuse emojis (max 2-3 per section)
- ‚ùå **NEVER** use all caps for emphasis
- ‚ùå **NEVER** mix different formatting styles inconsistently

## üìö Content Quality Standards

### MUST FOLLOW:
- **Write in English**: All content must be in English language (translation in progress)
- **Include practical examples**: Every concept should have working code
- **Explain error scenarios**: Include common mistakes and solutions
- **Maintain learning progression**: Build from fundamentals to advanced topics
- **Use consistent terminology**: Follow technical glossary for translations

### PROHIBITED:
- ‚ùå **NEVER** leave Korean text untranslated
- ‚ùå **NEVER** copy-paste without understanding
- ‚ùå **NEVER** skip error handling explanations
- ‚ùå **NEVER** assume reader knowledge of advanced concepts
- ‚ùå **NEVER** translate inconsistently across files

## üîÑ GitBook Integration

### MUST FOLLOW:
- **Maintain SUMMARY.md**: Keep it synchronized with actual file structure
- **Use proper links**: Ensure all internal links work correctly
- **Update README.md**: Keep project overview current
- **Update navigation text**: Translate Korean text in navigation while keeping file references

### PROHIBITED:
- ‚ùå **NEVER** break internal links
- ‚ùå **NEVER** forget to update SUMMARY.md when adding new files
- ‚ùå **NEVER** create orphaned files without proper linking
- ‚ùå **NEVER** leave Korean text in navigation elements

## üöÄ Technology Stack Focus

### Priority Technologies:
1. **JavaScript/TypeScript**: Core programming concepts
2. **React**: Modern frontend development
3. **Git**: Version control and collaboration
4. **Web Technologies**: HTTP, REST API, Browser concepts
5. **Cloud/AWS**: Modern deployment and infrastructure
6. **Design Systems**: UI/UX and design principles

### MUST FOLLOW:
- **Focus on practical application**: Emphasize real-world usage
- **Include modern best practices**: Stay current with industry standards
- **Provide troubleshooting guides**: Include common issues and solutions
- **Maintain technical accuracy**: Preserve exact technical meaning during translation

### PROHIBITED:
- ‚ùå **NEVER** include outdated information
- ‚ùå **NEVER** skip security considerations
- ‚ùå **NEVER** ignore performance implications
- ‚ùå **NEVER** lose technical precision during translation

## üìã File Reference Examples

### Core Files:
- [README.md](mdc:README.md) - Project overview and navigation
- [SUMMARY.md](mdc:SUMMARY.md) - GitBook table of contents
- [Git/01_Install.md](mdc:Git/01_Install.md) - Sequential learning example
- [JavaScript/Array.md](mdc:JavaScript/Array.md) - Comprehensive content example
- [React/Hook.md](mdc:React/Hook.md) - Modern React concepts

### Image References:
- [Images/array.png](mdc:Images/array.png) - Visual aid example
- [Images/git_merge.png](mdc:Images/git_merge.png) - Git concept illustration

## üåê Translation Integration

### MUST FOLLOW:
- **Reference translation rules**: See [translation-guidelines.mdc](mdc:.cursor/rules/translation-guidelines.mdc)
- **Maintain technical glossary**: Use consistent terminology across all files
- **Preserve educational structure**: Keep learning progression intact
- **Update cross-references**: Ensure all internal links work after translation

### Translation Workflow:
1. **Identify Korean content**: Mark all text requiring translation
2. **Preserve technical accuracy**: Maintain exact technical meaning
3. **Update navigation**: Translate Korean text in links and navigation
4. **Verify consistency**: Ensure terms are translated uniformly
5. **Test functionality**: Confirm all links and references work

### PROHIBITED:
- ‚ùå **NEVER** translate without following translation guidelines
- ‚ùå **NEVER** ignore technical term consistency
- ‚ùå **NEVER** break cross-file references during translation
- ‚ùå **NEVER** lose the educational flow and structure

## ‚ö†Ô∏è Critical Reminders

### ALWAYS REMEMBER:
- This is a **learning resource**, not a reference manual
- **English language** is now mandatory for all content (translation in progress)
- **Practical examples** are more valuable than theory
- **Visual aids** significantly improve understanding
- **Sequential learning** structure must be maintained
- **Technical accuracy** must be preserved during translation

### IMMEDIATE STOP CONDITIONS:
- If you're about to leave Korean text untranslated
- If you're about to create a file with spaces in the name
- If you're about to place an image outside the Images/ directory
- If you're about to skip the definition section
- If you're about to write code without language specification
- If you're about to translate inconsistently with the glossary
