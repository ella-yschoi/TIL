---
description: 
globs: 
alwaysApply: true
---
# Multilingual TIL Translation Guidelines

## 🎯 Translation Project Overview
This project maintains both Korean (kor/) and English (en/) versions of all TIL content. The translation guidelines ensure consistency, technical accuracy, and educational quality across both language versions.

## 📝 Translation Standards

### MUST FOLLOW:
- **Maintain technical accuracy**: Preserve exact technical terms and concepts
- **Keep learning structure**: Retain the definition → syntax → examples → practice flow
- **Preserve code examples**: Translate comments and explanations, keep code unchanged
- **Maintain visual hierarchy**: Keep the same heading structure and formatting
- **Use consistent terminology**: Create and follow a technical glossary for each language
- **Mirror content structure**: Both kor/ and en/ versions must have identical organization

### PROHIBITED:
- ❌ **NEVER** change code syntax or logic
- ❌ **NEVER** lose the educational progression
- ❌ **NEVER** skip technical terms without proper translation
- ❌ **NEVER** change file names or directory structure
- ❌ **NEVER** remove or modify images and their references
- ❌ **NEVER** create content in only one language

## 🌐 Language Translation Rules

### Technical Terminology:
- **Create language-specific glossaries**: Maintain consistent technical term translations for each language
- **Preserve brand names**: Keep JavaScript, TypeScript, React, Git, AWS as-is in both languages
- **Translate concepts**: Convert explanations to clear, natural language
- **Maintain context**: Ensure technical context is preserved in both versions

### Code Comments Translation:
```javascript
// Korean version (kor/)
let arr = [1, 2, 3];
arr.pop(); // 배열의 마지막 요소를 제거하는 방법

// English version (en/)
let arr = [1, 2, 3];
arr.pop(); // Method to remove the last element of an array
```

### PROHIBITED:
- ❌ **NEVER** translate programming language keywords
- ❌ **NEVER** change variable names in examples
- ❌ **NEVER** modify function names or API calls
- ❌ **NEVER** translate error messages without context
- ❌ **NEVER** use different code examples between languages

## 📚 Content Structure Preservation

### MUST FOLLOW:
- **Keep section order**: Maintain the exact sequence of sections in both languages
- **Preserve examples**: Translate explanations but keep code intact
- **Maintain formatting**: Keep bold, italic, and code formatting identical
- **Retain emojis**: Keep the tree theme (🌳, 🪵) and section emojis consistent
- **Parallel content**: Every section must exist in both kor/ and en/

### Educational Flow (Both Languages):
1. **Definition**: What is the concept?
2. **Syntax/Grammar**: How to use it?
3. **Examples**: Real-world code examples (코드 유지, 설명 번역)
4. **Practice**: Learning progression

### PROHIBITED:
- ❌ **NEVER** reorder sections
- ❌ **NEVER** remove learning steps
- ❌ **NEVER** change the difficulty progression
- ❌ **NEVER** modify the visual structure
- ❌ **NEVER** skip sections in one language

## 🔤 Translation Quality Standards

### MUST FOLLOW:
- **Clear and concise**: Use simple, direct language appropriate for each language
- **Technical precision**: Maintain exact technical meaning in both languages
- **Consistent style**: Use uniform writing style within each language
- **Natural flow**: Ensure content reads naturally in each language, not like direct translation
- **Educational tone**: Maintain the friendly, educational tone in both versions

### Writing Style Guidelines:
- **Use active voice**: "JavaScript provides..." / "JavaScript는 제공합니다..."
- **Be direct**: "To create an array..." / "배열을 생성하려면..."
- **Maintain tone**: Keep the friendly, educational tone in both languages
- **Use present tense**: For explanations and examples in both languages

### PROHIBITED:
- ❌ **NEVER** use machine translation without review
- ❌ **NEVER** create awkward or unnatural language
- ❌ **NEVER** lose the educational tone
- ❌ **NEVER** use overly complex vocabulary
- ❌ **NEVER** mix languages within the same file

## 📋 Technical Glossary Creation

### MUST CREATE AND MAINTAIN:
```markdown
# Korean Technical Terms Glossary (kor/)

## JavaScript/TypeScript
- 배열 (array) → array
- 함수 (function) → function
- 객체 (object) → object
- 변수 (variable) → variable
- 반복문 (loop) → loop
- 조건문 (conditional) → conditional

## React
- 컴포넌트 (component) → component
- 상태 (state) → state
- 속성 (props) → props
- 훅 (hook) → hook
- 렌더링 (rendering) → rendering

## Git
- 브랜치 (branch) → branch
- 커밋 (commit) → commit
- 병합 (merge) → merge
- 리베이스 (rebase) → rebase
- 저장소 (repository) → repository

# English Technical Terms Glossary (en/)

## JavaScript/TypeScript
- array → array
- function → function
- object → object
- variable → variable
- loop → loop
- conditional → conditional

## React
- component → component
- state → state
- props → props
- hook → hook
- rendering → rendering

## Git
- branch → branch
- commit → commit
- merge → merge
- rebase → rebase
- repository → repository
```

### PROHIBITED:
- ❌ **NEVER** translate inconsistently
- ❌ **NEVER** create multiple terms for same concept within a language
- ❌ **NEVER** ignore context when translating
- ❌ **NEVER** use different terms for same concept between languages

## 🔄 File Processing Workflow

### MUST FOLLOW:
1. **Create in both languages**: Always create content in both kor/ and en/
2. **Read entire file**: Understand the complete content structure
3. **Identify technical terms**: Mark all technical concepts
4. **Translate systematically**: Section by section, maintaining flow
5. **Review code examples**: Ensure comments are properly translated
6. **Verify formatting**: Check all markdown formatting is preserved
7. **Test links**: Ensure all internal links work in both languages

### Quality Checklist:
- [ ] Content exists in both kor/ and en/
- [ ] All technical terms translated consistently
- [ ] Code examples remain unchanged
- [ ] File structure and formatting preserved
- [ ] Images and references maintained
- [ ] Learning progression intact
- [ ] Navigation works in both languages

### PROHIBITED:
- ❌ **NEVER** create content in only one language
- ❌ **NEVER** translate files in isolation
- ❌ **NEVER** skip the review process
- ❌ **NEVER** ignore cross-file references
- ❌ **NEVER** forget to update navigation in both languages

## 🎨 Visual and Formatting Preservation

### MUST FOLLOW:
- **Keep emojis**: Maintain 🌳 tree theme and section emojis in both languages
- **Preserve formatting**: Bold, italic, code blocks, lists identical in both versions
- **Maintain spacing**: Keep `<br/>` tags and visual breaks consistent
- **Retain images**: All image references must remain unchanged in both versions
- **Consistent visual hierarchy**: Same heading structure in both languages

### Image References:
```markdown
// Keep exactly as-is in both languages:
![array.png](mdc:../Images/array.png)
![git_merge.png](mdc:../Images/git_merge.png)
```

### PROHIBITED:
- ❌ **NEVER** change image file names
- ❌ **NEVER** modify image paths
- ❌ **NEVER** remove visual elements
- ❌ **NEVER** change the visual hierarchy
- ❌ **NEVER** use different emojis between languages

## 📖 Content-Specific Translation Rules

### Code Examples:
```javascript
// Korean version (kor/)
let arr = [1, 2, 3];
arr.pop(); // 배열의 마지막 요소를 제거하는 방법

// English version (en/)
let arr = [1, 2, 3];
arr.pop(); // Method to remove the last element of an array
```

### Error Explanations:
```javascript
// Korean version (kor/)
// 이 경우 undefined가 반환됩니다

// English version (en/)
// In this case, undefined is returned
```

### PROHIBITED:
- ❌ **NEVER** change code logic
- ❌ **NEVER** modify variable names
- ❌ **NEVER** alter function calls
- ❌ **NEVER** change error messages
- ❌ **NEVER** use different examples between languages

## 🔗 Cross-Reference Management

### MUST FOLLOW:
- **Update internal links**: Ensure all `[filename](mdc:filename)` references work in both languages
- **Maintain navigation**: Keep README.md and SUMMARY.md synchronized in both languages
- **Preserve structure**: Don't break the hierarchical organization
- **Check consistency**: Ensure translated terms are consistent within each language
- **Language-specific navigation**: Each language has its own navigation structure

### File Reference Updates:
```markdown
// Korean version (kor/)
- [JavaScript 배열](mdc:JavaScript/Array.md)

// English version (en/)
- [JavaScript Arrays](mdc:JavaScript/Array.md)
```

### PROHIBITED:
- ❌ **NEVER** break internal navigation
- ❌ **NEVER** create dead links
- ❌ **NEVER** forget to update cross-references
- ❌ **NEVER** change file paths
- ❌ **NEVER** mix language references in navigation

## 🌐 Language-Specific Standards

### Korean Version (kor/):
- **Use Korean language**: All content must be in Korean
- **Korean technical terms**: Use appropriate Korean terminology
- **Korean explanations**: Provide clear Korean explanations
- **Korean navigation**: All navigation elements in Korean
- **Natural Korean**: Write in natural, fluent Korean

### English Version (en/):
- **Use English language**: All content must be in English
- **English technical terms**: Use standard English terminology
- **English explanations**: Provide clear English explanations
- **English navigation**: All navigation elements in English
- **Natural English**: Write in natural, fluent English

### PROHIBITED:
- ❌ **NEVER** mix languages within the same file
- ❌ **NEVER** use inconsistent terminology within a language
- ❌ **NEVER** translate programming language keywords
- ❌ **NEVER** lose technical accuracy during translation
- ❌ **NEVER** create awkward or unnatural language

## ⚠️ Critical Translation Reminders

### ALWAYS REMEMBER:
- **Educational focus**: This is learning material, not documentation
- **Technical accuracy**: Preserve exact technical meaning in both languages
- **Consistency**: Use the same terms throughout each language
- **Natural language**: Write clear, readable content in each language
- **Complete content**: Don't leave any content untranslated
- **Parallel structure**: Both languages must have identical organization

### IMMEDIATE STOP CONDITIONS:
- If you're about to change code syntax
- If you're about to translate programming keywords
- If you're about to modify file structure
- If you're about to skip technical term consistency
- If you're about to lose the educational flow
- If you're about to create content in only one language
- If you're about to use different examples between languages

## 📋 Translation Priority Order

### Phase 1: Core Files
1. [README.md](mdc:README.md) - Bilingual project overview
2. [kor/README.md](mdc:kor/README.md) - Korean project overview
3. [en/README.md](mdc:en/README.md) - English project overview
4. [kor/SUMMARY.md](mdc:kor/SUMMARY.md) - Korean navigation
5. [en/SUMMARY.md](mdc:en/SUMMARY.md) - English navigation

### Phase 2: Learning Sequences
1. [kor/Git/01_Install.md](mdc:kor/Git/01_Install.md) - Korean sequential learning
2. [en/Git/01_Install.md](mdc:en/Git/01_Install.md) - English sequential learning
3. [kor/Git/02_Add_Commit.md](mdc:kor/Git/02_Add_Commit.md) - Korean step-by-step progression
4. [en/Git/02_Add_Commit.md](mdc:en/Git/02_Add_Commit.md) - English step-by-step progression

### Phase 3: Advanced Topics
1. [kor/React/Hook.md](mdc:kor/React/Hook.md) - Korean modern React concepts
2. [en/React/Hook.md](mdc:en/React/Hook.md) - English modern React concepts
3. [kor/TypeScript/Basics.md](mdc:kor/TypeScript/Basics.md) - Korean type safety
4. [en/TypeScript/Basics.md](mdc:en/TypeScript/Basics.md) - English type safety

### PROHIBITED:
- ❌ **NEVER** translate files out of logical order
- ❌ **NEVER** skip dependency files
- ❌ **NEVER** ignore cross-references between files
- ❌ **NEVER** create content in only one language
