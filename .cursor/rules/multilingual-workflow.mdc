---
description:
globs:
alwaysApply: false
---
# Multilingual TIL Workflow Guidelines

## 🎯 Project Overview
This document defines the workflow for maintaining a bilingual TIL project with Korean (kor/) and English (en/) versions. All content must be created and maintained in both languages simultaneously.

## 📁 Directory Structure Rules

### MUST FOLLOW:
- **Dual language structure**: Always maintain both kor/ and en/ directories
- **Mirror organization**: Both directories must have identical folder structure
- **Consistent naming**: Use same file names across both languages
- **Shared resources**: Images and assets must exist in both versions

### Directory Structure:
```
TIL/
├── README.md (Bilingual overview)
├── kor/
│   ├── README.md (Korean overview)
│   ├── SUMMARY.md (Korean navigation)
│   ├── Images/
│   └── [Technology Domains]/
├── en/
│   ├── README.md (English overview)
│   ├── SUMMARY.md (English navigation)
│   ├── Images/
│   └── [Technology Domains]/
```

### PROHIBITED:
- ❌ **NEVER** place content outside kor/ or en/ directories
- ❌ **NEVER** create different folder structures between languages
- ❌ **NEVER** use different file names for same content

## 🔄 Content Creation Workflow

### MUST FOLLOW:
1. **Create in both languages**: Always create content in both kor/ and en/
2. **Start with Korean**: Write content in Korean first (kor/)
3. **Create English version**: Write content in English (en/)
4. **Maintain synchronization**: Keep both versions updated together
5. **Test both versions**: Verify all links and content work in both languages

### File Creation Process:
```bash
# Example workflow
kor/JavaScript/Array.md  ← Create Korean version first
en/JavaScript/Array.md   ← Create English version second
```

### PROHIBITED:
- ❌ **NEVER** create content in only one language
- ❌ **NEVER** forget to update both versions
- ❌ **NEVER** ignore navigation synchronization

## 📝 File Naming Standards

### MUST FOLLOW:
- **Identical file names**: Use same naming across kor/ and en/ directories
- **Use underscores**: Replace spaces with underscores
- **Capitalize words**: Use Title_Case for file names
- **Descriptive names**: File names should clearly indicate content

### Examples:
```
kor/JavaScript/Array.md
en/JavaScript/Array.md

kor/Git/01_Install.md
en/Git/01_Install.md

kor/React/Hook.md
en/React/Hook.md
```

### PROHIBITED:
- ❌ **NEVER** use spaces in file names
- ❌ **NEVER** use different names for same content
- ❌ **NEVER** use camelCase or PascalCase for file names

## 🌐 Language-Specific Standards

### Korean Version (kor/):
- **Use Korean language**: All content must be in Korean
- **Korean technical terms**: Use appropriate Korean terminology
- **Korean explanations**: Provide clear Korean explanations
- **Korean navigation**: All navigation elements in Korean

### English Version (en/):
- **Use English language**: All content must be in English
- **English technical terms**: Use standard English terminology
- **English explanations**: Provide clear English explanations
- **English navigation**: All navigation elements in English

### PROHIBITED:
- ❌ **NEVER** mix languages within the same file
- ❌ **NEVER** use inconsistent terminology within a language
- ❌ **NEVER** translate programming language keywords

## 💻 Code Block Standards

### MUST FOLLOW:
- **Identical code**: Code blocks must be exactly the same in both languages
- **Language-specific comments**: Only comments and explanations should differ
- **Specify language**: Always use ```javascript, ```shell, ```typescript
- **Include comments**: Explain complex logic with inline comments

### Code Translation Rules:
```javascript
// Korean version (kor/)
let arr = [1, 2, 3];
arr.pop(); // 마지막 요소 제거

// English version (en/)
let arr = [1, 2, 3];
arr.pop(); // Remove the last element
```

### PROHIBITED:
- ❌ **NEVER** change code logic between languages
- ❌ **NEVER** modify variable names or function calls
- ❌ **NEVER** translate programming keywords

## 🖼️ Image Usage Rules

### MUST FOLLOW:
- **Duplicate images**: Store identical images in both `kor/Images/` and `en/Images/`
- **Same file names**: Use identical image names across languages
- **Store in Images/**: All images must be in the Images directory
- **Use relative paths**: Reference as `../Images/filename.png` in both versions

### Image References:
```markdown
// Both kor/ and en/ versions use:
![array.png](mdc:../Images/array.png)
![git_merge.png](mdc:../Images/git_merge.png)
```

### PROHIBITED:
- ❌ **NEVER** reference images from external URLs
- ❌ **NEVER** use different image names between languages
- ❌ **NEVER** place images outside the Images/ directory

## 🔗 Navigation and Linking

### MUST FOLLOW:
- **Language-specific navigation**: Each language has its own SUMMARY.md
- **Maintain SUMMARY.md**: Keep it synchronized with actual file structure
- **Use proper links**: Ensure all internal links work correctly
- **Update README.md**: Keep project overview current

### Navigation Structure:
- `kor/README.md` - Korean project overview with tree theme
- `kor/SUMMARY.md` - Korean navigation
- `en/README.md` - English project overview with tree theme
- `en/SUMMARY.md` - English navigation

### PROHIBITED:
- ❌ **NEVER** break internal links
- ❌ **NEVER** forget to update SUMMARY.md when adding new files
- ❌ **NEVER** create orphaned files without proper linking

## 📋 Quality Checklist

### MUST VERIFY:
- [ ] Content exists in both kor/ and en/
- [ ] File names are identical across languages
- [ ] Code examples are identical
- [ ] Navigation works in both languages
- [ ] Images are available in both versions
- [ ] Terminology is consistent within each language

### PROHIBITED:
- ❌ **NEVER** skip quality checks for either language
- ❌ **NEVER** ignore navigation synchronization
- ❌ **NEVER** forget to test both versions

## 🔄 Update Workflow

### MUST FOLLOW:
1. **Identify changes**: Determine what needs to be updated
2. **Update Korean version**: Make changes to kor/ content
3. **Update English version**: Make corresponding changes to en/ content
4. **Verify consistency**: Ensure both versions remain synchronized
5. **Test navigation**: Confirm all links work in both languages

### PROHIBITED:
- ❌ **NEVER** update only one language version
- ❌ **NEVER** ignore cross-language consistency
- ❌ **NEVER** skip testing after updates

## 📚 Content Organization

### Learning Categories:
- **Algorithm**: Data structures and algorithms
- **Auth**: Authentication and security
- **AWS**: Cloud computing and AWS services
- **Design**: Design systems and UI/UX
- **Docker**: Container technology
- **Git**: Version control
- **Infra**: Infrastructure and deployment
- **JavaScript**: JavaScript programming
- **React**: React framework
- **TypeScript**: TypeScript programming
- **Web**: Web technologies and standards

### PROHIBITED:
- ❌ **NEVER** create content outside defined categories
- ❌ **NEVER** use inconsistent category names
- ❌ **NEVER** mix content from different categories

## 📋 File Reference Examples

### Core Files:
- [README.md](mdc:README.md) - Bilingual project overview
- [kor/README.md](mdc:kor/README.md) - Korean project overview
- [en/README.md](mdc:en/README.md) - English project overview
- [kor/SUMMARY.md](mdc:kor/SUMMARY.md) - Korean navigation
- [en/SUMMARY.md](mdc:en/SUMMARY.md) - English navigation

### Content Examples:
- [kor/JavaScript/Array.md](mdc:kor/JavaScript/Array.md) - Korean array concepts
- [en/JavaScript/Array.md](mdc:en/JavaScript/Array.md) - English array concepts
- [kor/Git/01_Install.md](mdc:kor/Git/01_Install.md) - Korean Git installation
- [en/Git/01_Install.md](mdc:en/Git/01_Install.md) - English Git installation

### Image Examples:
- [kor/Images/array.png](mdc:kor/Images/array.png) - Korean version image
- [en/Images/array.png](mdc:en/Images/array.png) - English version image

## ⚠️ Critical Reminders

### ALWAYS REMEMBER:
- This is a **multilingual learning resource**
- **Both languages are equally important**
- **Content must be identical in structure and code**
- **Navigation must work in both languages**
- **Images must be available in both versions**

### IMMEDIATE STOP CONDITIONS:
- If you're about to create content in only one language
- If you're about to use different file names between languages
- If you're about to change code examples between languages
- If you're about to break navigation in either language
